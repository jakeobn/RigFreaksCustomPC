<style>
  .cart-drawer {
    position: fixed;
    top: 0;
    right: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 200;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
    display: flex;
    justify-content: flex-end;
  }
  
  .cart-drawer[aria-hidden="false"] {
    opacity: 1;
    visibility: visible;
  }
  
  .cart-drawer__panel {
    position: relative;
    width: 100%;
    max-width: 450px;
    height: 100%;
    background-color: {{ settings.color_background }};
    box-shadow: -5px 0 30px rgba(0, 0, 0, 0.15);
    transform: translateX(100%);
    transition: transform 0.3s ease;
    display: flex;
    flex-direction: column;
  }
  
  .cart-drawer[aria-hidden="false"] .cart-drawer__panel {
    transform: translateX(0);
  }
  
  .cart-drawer__header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem;
    border-bottom: 1px solid {{ settings.color_border }};
  }
  
  .cart-drawer__title {
    display: flex;
    align-items: center;
    font-family: {{ settings.font_heading.family }}, {{ settings.font_heading.fallback_families }};
    font-weight: {{ settings.heading_weight }};
    font-size: 1.25rem;
    margin: 0;
    color: {{ settings.color_text }};
  }
  
  .cart-drawer__title-icon {
    margin-right: 0.75rem;
  }
  
  .cart-drawer__title-count {
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 1.5rem;
    height: 1.5rem;
    margin-left: 0.5rem;
    padding: 0 0.25rem;
    border-radius: 1rem;
    background-color: {{ settings.color_primary }};
    color: #ffffff;
    font-size: 0.85rem;
    font-weight: 600;
  }
  
  .cart-drawer__close {
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    color: {{ settings.color_text }};
  }
  
  .cart-drawer__content {
    flex: 1;
    overflow-y: auto;
    padding: 1.5rem;
  }
  
  .cart-drawer__empty {
    text-align: center;
    padding: 2rem 1rem;
  }
  
  .cart-drawer__empty-icon {
    display: block;
    margin: 0 auto 1.5rem;
    color: {{ settings.color_text_subdued }};
  }
  
  .cart-drawer__empty-icon svg {
    width: 48px;
    height: 48px;
  }
  
  .cart-drawer__empty-text {
    margin: 0 0 1.5rem;
    font-size: 1.1rem;
    color: {{ settings.color_text }};
  }
  
  .cart-drawer__shop-button {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: {{ settings.button_border_radius }}px;
    background-color: {{ settings.color_button }};
    color: {{ settings.color_button_text }};
    font-weight: 600;
    text-align: center;
    text-decoration: none;
    transition: background-color 0.2s ease;
  }
  
  .cart-drawer__shop-button:hover {
    background-color: {{ settings.color_button | color_darken: 10 }};
  }
  
  .cart-drawer__items {
    margin: 0;
    padding: 0;
    list-style: none;
  }
  
  .cart-drawer__item {
    display: flex;
    padding: 1.5rem 0;
    border-bottom: 1px solid {{ settings.color_border }};
  }
  
  .cart-drawer__item-image {
    width: 80px;
    height: 80px;
    margin-right: 1rem;
    border-radius: {{ settings.border_radius }}px;
    overflow: hidden;
  }
  
  .cart-drawer__item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .cart-drawer__item-content {
    flex: 1;
    min-width: 0;
  }
  
  .cart-drawer__item-title {
    margin: 0 0 0.25rem;
    font-size: 1rem;
    font-weight: 600;
    color: {{ settings.color_text }};
    text-decoration: none;
  }
  
  .cart-drawer__item-title a {
    color: inherit;
    text-decoration: none;
  }
  
  .cart-drawer__item-variant {
    margin: 0 0 0.5rem;
    font-size: 0.85rem;
    color: {{ settings.color_text_subdued }};
  }
  
  .cart-drawer__item-price-quantity {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  
  .cart-drawer__item-quantity {
    display: flex;
    align-items: center;
  }
  
  .cart-drawer__quantity-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
    border: 1px solid {{ settings.color_border }};
    border-radius: {{ settings.border_radius }}px;
    background-color: {{ settings.color_card_background }};
    color: {{ settings.color_text }};
    cursor: pointer;
  }
  
  .cart-drawer__quantity-input {
    width: 40px;
    height: 28px;
    margin: 0 0.5rem;
    padding: 0;
    border: 1px solid {{ settings.color_border }};
    border-radius: {{ settings.border_radius }}px;
    background-color: {{ settings.color_card_background }};
    color: {{ settings.color_text }};
    font-size: 0.9rem;
    text-align: center;
  }
  
  .cart-drawer__item-price {
    font-weight: 600;
    color: {{ settings.color_text }};
  }
  
  .cart-drawer__item-remove {
    margin-left: 1rem;
    background: none;
    border: none;
    padding: 0;
    color: {{ settings.color_text_subdued }};
    cursor: pointer;
    transition: color 0.2s ease;
  }
  
  .cart-drawer__item-remove:hover {
    color: {{ settings.color_error }};
  }
  
  .cart-drawer__footer {
    border-top: 1px solid {{ settings.color_border }};
    padding: 1.5rem;
  }
  
  .cart-drawer__subtotal {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1rem;
    font-size: 1.1rem;
    font-weight: 600;
  }
  
  .cart-drawer__checkout {
    display: block;
    width: 100%;
    padding: 1rem;
    margin-bottom: 1rem;
    border: none;
    border-radius: {{ settings.button_border_radius }}px;
    background-color: {{ settings.color_button }};
    color: {{ settings.color_button_text }};
    font-size: 1rem;
    font-weight: 600;
    text-align: center;
    text-decoration: none;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .cart-drawer__checkout:hover {
    background-color: {{ settings.color_button | color_darken: 10 }};
  }
  
  .cart-drawer__continue {
    display: block;
    width: 100%;
    padding: 1rem;
    border: 1px solid {{ settings.color_border }};
    border-radius: {{ settings.button_border_radius }}px;
    background-color: transparent;
    color: {{ settings.color_text }};
    font-size: 1rem;
    font-weight: 600;
    text-align: center;
    text-decoration: none;
    cursor: pointer;
    transition: background-color 0.2s ease, color 0.2s ease;
  }
  
  .cart-drawer__continue:hover {
    background-color: {{ settings.color_card_background }};
  }
  
  .cart-drawer__note {
    margin-top: 1.5rem;
  }
  
  .cart-drawer__note-label {
    display: block;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    font-weight: 600;
    color: {{ settings.color_text }};
  }
  
  .cart-drawer__note-textarea {
    width: 100%;
    min-height: 80px;
    padding: 0.75rem;
    border: 1px solid {{ settings.color_border }};
    border-radius: {{ settings.border_radius }}px;
    background-color: {{ settings.color_card_background }};
    color: {{ settings.color_text }};
    font-family: inherit;
    font-size: 0.9rem;
    resize: vertical;
  }
  
  .cart-drawer__note-textarea:focus {
    outline: none;
    border-color: {{ settings.color_primary }};
  }
  
  .cart-drawer__shipping-message {
    margin-top: 1rem;
    font-size: 0.9rem;
    color: {{ settings.color_text_subdued }};
    text-align: center;
  }
  
  .cart-drawer__upsell {
    margin-top: 1.5rem;
    padding-top: 1.5rem;
    border-top: 1px solid {{ settings.color_border }};
  }
  
  .cart-drawer__upsell-title {
    margin: 0 0 1rem;
    font-size: 1rem;
    font-weight: 600;
    color: {{ settings.color_text }};
  }
  
  .cart-drawer__upsell-products {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }
  
  .cart-drawer__upsell-product {
    text-decoration: none;
  }
  
  .cart-drawer__upsell-image {
    display: block;
    width: 100%;
    aspect-ratio: 1 / 1;
    margin-bottom: 0.5rem;
    border-radius: {{ settings.border_radius }}px;
    overflow: hidden;
  }
  
  .cart-drawer__upsell-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .cart-drawer__upsell-title {
    margin: 0 0 0.25rem;
    font-size: 0.9rem;
    color: {{ settings.color_text }};
  }
  
  .cart-drawer__upsell-price {
    font-size: 0.9rem;
    font-weight: 600;
    color: {{ settings.color_text }};
  }
  
  .cart-drawer__upsell-add {
    display: block;
    width: 100%;
    margin-top: 0.5rem;
    padding: 0.5rem;
    border: none;
    border-radius: {{ settings.border_radius }}px;
    background-color: {{ settings.color_button_secondary }};
    color: {{ settings.color_button_secondary_text }};
    font-size: 0.8rem;
    font-weight: 600;
    text-align: center;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .cart-drawer__upsell-add:hover {
    background-color: {{ settings.color_button_secondary | color_darken: 10 }};
  }
</style>

<div class="cart-drawer__panel">
  <div class="cart-drawer__header">
    <h2 class="cart-drawer__title">
      <span class="cart-drawer__title-icon">{% render 'icon-cart' %}</span>
      {{ 'cart.general.title' | t }}
      {% if cart.item_count > 0 %}
        <span class="cart-drawer__title-count">{{ cart.item_count }}</span>
      {% endif %}
    </h2>
    <button class="cart-drawer__close" data-cart-drawer-toggle aria-label="{{ 'accessibility.close' | t }}">
      {% render 'icon-close' %}
    </button>
  </div>

  <div class="cart-drawer__content" id="CartDrawerContent">
    {% if cart.item_count == 0 %}
      <div class="cart-drawer__empty">
        <div class="cart-drawer__empty-icon">
          {% render 'icon-cart' %}
        </div>
        <p class="cart-drawer__empty-text">{{ 'cart.general.empty' | t }}</p>
        <a href="{{ routes.all_products_collection_url }}" class="cart-drawer__shop-button">
          {{ 'cart.general.continue_shopping' | t }}
        </a>
      </div>
    {% else %}
      <ul class="cart-drawer__items" id="CartDrawerItems">
        {%- for item in cart.items -%}
          <li class="cart-drawer__item" data-cart-item="{{ item.key }}">
            <div class="cart-drawer__item-image">
              <img src="{{ item.image | image_url: width: 160 }}" alt="{{ item.title | escape }}">
            </div>
            
            <div class="cart-drawer__item-content">
              <h3 class="cart-drawer__item-title">
                <a href="{{ item.url }}">{{ item.product.title }}</a>
              </h3>
              
              {% if item.product.has_only_default_variant == false %}
                <div class="cart-drawer__item-variant">
                  {% for option in item.options_with_values %}
                    <div>{{ option.name }}: {{ option.value }}</div>
                  {% endfor %}
                </div>
              {% endif %}
              
              <div class="cart-drawer__item-price-quantity">
                <div class="cart-drawer__item-quantity">
                  <button 
                    class="cart-drawer__quantity-button" 
                    data-cart-update
                    data-cart-key="{{ item.key }}"
                    data-cart-quantity="{{ item.quantity | minus: 1 }}"
                    {% if item.quantity == 1 %}disabled{% endif %}
                    aria-label="{{ 'cart.items.decrease_quantity' | t }}"
                  >-</button>
                  
                  <input 
                    class="cart-drawer__quantity-input"
                    type="number"
                    name="updates[]"
                    value="{{ item.quantity }}"
                    min="1"
                    data-cart-quantity-input
                    data-cart-key="{{ item.key }}"
                    aria-label="{{ 'cart.items.quantity_indicator' | t: quantity: item.quantity }}"
                  >
                  
                  <button 
                    class="cart-drawer__quantity-button" 
                    data-cart-update
                    data-cart-key="{{ item.key }}"
                    data-cart-quantity="{{ item.quantity | plus: 1 }}"
                    aria-label="{{ 'cart.items.increase_quantity' | t }}"
                  >+</button>
                </div>
                
                <div class="cart-drawer__item-price">
                  {{ item.final_line_price | money }}
                </div>
                
                <button 
                  class="cart-drawer__item-remove" 
                  data-cart-remove
                  data-cart-key="{{ item.key }}"
                  aria-label="{{ 'cart.general.remove' | t }}"
                >
                  {% render 'icon-trash' %}
                </button>
              </div>
            </div>
          </li>
        {%- endfor -%}
      </ul>
      
      {% if settings.show_cart_upsells %}
        <div class="cart-drawer__upsell">
          <h3 class="cart-drawer__upsell-title">{{ 'cart.upsell.title' | t }}</h3>
          
          <div class="cart-drawer__upsell-products">
            {% comment %}
              Upsell products will be added via AJAX when cart is opened
            {% endcomment %}
          </div>
        </div>
      {% endif %}
    {% endif %}
  </div>

  {% if cart.item_count > 0 %}
    <div class="cart-drawer__footer">
      <div class="cart-drawer__subtotal">
        <span>{{ 'cart.general.subtotal' | t }}</span>
        <span id="CartDrawerSubtotal">{{ cart.total_price | money }}</span>
      </div>
      
      {% if settings.enable_cart_notes %}
        <div class="cart-drawer__note">
          <label for="CartNote" class="cart-drawer__note-label">{{ 'cart.general.note' | t }}</label>
          <textarea
            id="CartNote"
            name="note"
            class="cart-drawer__note-textarea"
            placeholder="{{ 'cart.general.note' | t }}"
          >{{ cart.note }}</textarea>
        </div>
      {% endif %}
      
      <div class="cart-drawer__shipping-message">
        {{ 'cart.general.shipping_at_checkout' | t }}
      </div>
      
      <a href="{{ routes.cart_url }}" class="cart-drawer__checkout">
        {{ 'cart.general.checkout' | t }}
      </a>
      
      <button class="cart-drawer__continue" data-cart-drawer-toggle>
        {{ 'cart.general.continue_shopping' | t }}
      </button>
    </div>
  {% endif %}
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Quantity adjustment
    const cartDrawerContent = document.getElementById('CartDrawerContent');
    
    if (cartDrawerContent) {
      cartDrawerContent.addEventListener('click', function(event) {
        // Handle quantity update buttons
        if (event.target.hasAttribute('data-cart-update')) {
          event.preventDefault();
          const key = event.target.getAttribute('data-cart-key');
          const quantity = parseInt(event.target.getAttribute('data-cart-quantity'));
          
          updateCartItem(key, quantity);
        }
        
        // Handle remove buttons
        if (event.target.hasAttribute('data-cart-remove') || 
            event.target.parentElement.hasAttribute('data-cart-remove')) {
          event.preventDefault();
          const button = event.target.hasAttribute('data-cart-remove') ? 
                        event.target : 
                        event.target.parentElement;
          const key = button.getAttribute('data-cart-key');
          
          updateCartItem(key, 0);
        }
      });
      
      // Handle quantity input changes
      cartDrawerContent.addEventListener('change', function(event) {
        if (event.target.hasAttribute('data-cart-quantity-input')) {
          event.preventDefault();
          const key = event.target.getAttribute('data-cart-key');
          const quantity = parseInt(event.target.value);
          
          if (quantity >= 1) {
            updateCartItem(key, quantity);
          } else {
            event.target.value = 1;
          }
        }
      });
      
      // Handle cart note updates
      const cartNoteTextarea = document.getElementById('CartNote');
      if (cartNoteTextarea) {
        cartNoteTextarea.addEventListener('blur', function() {
          updateCartNote(this.value);
        });
      }
    }
    
    async function updateCartItem(key, quantity) {
      try {
        const response = await fetch('/cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ id: key, quantity: quantity })
        });
        
        if (response.ok) {
          const cart = await response.json();
          updateCartDrawer(cart);
        }
      } catch (error) {
        console.error('Error updating cart:', error);
      }
    }
    
    async function updateCartNote(note) {
      try {
        const response = await fetch('/cart/update.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ note: note })
        });
      } catch (error) {
        console.error('Error updating cart note:', error);
      }
    }
    
    function updateCartDrawer(cart) {
      // Update cart count in header
      const headerCartCount = document.querySelector('.header__action-count');
      if (headerCartCount) {
        if (cart.item_count > 0) {
          headerCartCount.textContent = cart.item_count;
          headerCartCount.style.display = 'flex';
        } else {
          headerCartCount.style.display = 'none';
        }
      }
      
      // Update cart drawer count
      const cartDrawerTitleCount = document.querySelector('.cart-drawer__title-count');
      if (cartDrawerTitleCount) {
        if (cart.item_count > 0) {
          cartDrawerTitleCount.textContent = cart.item_count;
          cartDrawerTitleCount.style.display = 'flex';
        } else {
          cartDrawerTitleCount.style.display = 'none';
        }
      }
      
      // Update subtotal
      const cartDrawerSubtotal = document.getElementById('CartDrawerSubtotal');
      if (cartDrawerSubtotal) {
        cartDrawerSubtotal.textContent = formatMoney(cart.total_price);
      }
      
      // If cart is empty, refresh the drawer content
      if (cart.item_count === 0) {
        window.location.reload();
      }
    }
    
    function formatMoney(cents) {
      const moneyFormat = '{{ shop.money_format | json }}';
      
      function formatWithDelimiters(number, precision, thousands, decimal) {
        precision = precision || 2;
        thousands = thousands || ',';
        decimal = decimal || '.';
        
        if (isNaN(number) || number == null) {
          return 0;
        }
        
        number = (number / 100.0).toFixed(precision);
        
        const parts = number.split('.');
        const dollarsAmount = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands);
        const centsAmount = parts[1] ? decimal + parts[1] : '';
        
        return dollarsAmount + centsAmount;
      }
      
      let value = '';
      
      value = moneyFormat.replace(/\{\{[^}]+\}\}/g, formatWithDelimiters(cents, 2));
      
      return value;
    }
  });
</script>