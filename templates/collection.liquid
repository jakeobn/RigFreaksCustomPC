{% layout 'theme.liquid' %}

{% comment %}
  Collection Template
  
  Used for displaying collections of products with filters,
  sorting options, and pagination.
{% endcomment %}

<div class="collection" id="collection-{{ collection.id }}">
  <div class="page-width">
    <div class="collection__header">
      <div class="collection__header-content">
        <h1 class="collection__title">{{ collection.title }}</h1>
        
        {% if collection.description != blank %}
          <div class="collection__description rte">
            {{ collection.description }}
          </div>
        {% endif %}
      </div>
      
      {% if collection.image %}
        <div class="collection__header-image">
          <img 
            srcset="{{ collection.image | image_url: width: 300 }} 300w,
                    {{ collection.image | image_url: width: 400 }} 400w,
                    {{ collection.image | image_url: width: 500 }} 500w"
            src="{{ collection.image | image_url: width: 400 }}"
            sizes="(min-width: 990px) 400px, 100vw"
            alt="{{ collection.title | escape }}"
            width="{{ collection.image.width }}"
            height="{{ collection.image.height }}"
            loading="lazy"
          >
        </div>
      {% endif %}
    </div>
    
    <div class="collection__toolbar">
      <div class="collection__filter-button-container">
        <button
          type="button"
          class="collection__filter-button"
          aria-controls="collectionFilters"
          aria-expanded="false"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="collection__filter-icon">
            <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>
          </svg>
          <span class="collection__filter-text">{{ 'collections.filters.title' | t }}</span>
          <span class="collection__filter-count">{{ collection.filters | size }}</span>
        </button>
      </div>
      
      <div class="collection__sorting">
        <label for="SortBy" class="collection__sort-label">{{ 'collections.sorting.title' | t }}</label>
        <select name="sort_by" id="SortBy" class="collection__sort-select" aria-describedby="a11y-refresh-page-message">
          {%- assign sort_by = collection.sort_by | default: collection.default_sort_by -%}
          
          {% for option in collection.sort_options %}
            <option 
              value="{{ option.value }}" 
              {% if option.value == sort_by %}selected="selected"{% endif %}
            >
              {{ option.name }}
            </option>
          {% endfor %}
        </select>
      </div>
      
      <div class="collection__view-options">
        <button type="button" class="collection__view-button collection__view-button--grid collection__view-button--active" aria-label="{{ 'collections.view.grid' | t }}" data-view="grid">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="collection__view-icon">
            <rect x="3" y="3" width="7" height="7"></rect>
            <rect x="14" y="3" width="7" height="7"></rect>
            <rect x="14" y="14" width="7" height="7"></rect>
            <rect x="3" y="14" width="7" height="7"></rect>
          </svg>
        </button>
        
        <button type="button" class="collection__view-button collection__view-button--list" aria-label="{{ 'collections.view.list' | t }}" data-view="list">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="collection__view-icon">
            <line x1="8" y1="6" x2="21" y2="6"></line>
            <line x1="8" y1="12" x2="21" y2="12"></line>
            <line x1="8" y1="18" x2="21" y2="18"></line>
            <line x1="3" y1="6" x2="3.01" y2="6"></line>
            <line x1="3" y1="12" x2="3.01" y2="12"></line>
            <line x1="3" y1="18" x2="3.01" y2="18"></line>
          </svg>
        </button>
      </div>
      
      <div class="collection__product-count">
        <span class="collection__product-count-text">
          {% if collection.products_count == 1 %}
            {{ 'collections.general.item_count.one' | t: count: collection.products_count }}
          {% else %}
            {{ 'collections.general.item_count.other' | t: count: collection.products_count }}
          {% endif %}
        </span>
      </div>
    </div>
    
    <div class="collection__container">
      <div class="collection__sidebar" id="collectionFilters">
        <div class="collection__filters">
          <div class="collection__filters-header">
            <h2 class="collection__filters-title">{{ 'collections.filters.title' | t }}</h2>
            <button type="button" class="collection__filters-close" aria-label="{{ 'general.accessibility.close_filters' | t }}">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
            </button>
          </div>
          
          {% for filter in collection.filters %}
            <div class="collection__filter-group">
              <details class="collection__filter-details" {% if filter.active_values.size > 0 %}open{% endif %}>
                <summary class="collection__filter-summary">
                  <div>
                    <span class="collection__filter-name">{{ filter.label }}</span>
                    
                    {% if filter.active_values.size > 0 %}
                      <span class="collection__filter-active-count">{{ filter.active_values.size }}</span>
                    {% endif %}
                  </div>
                  
                  <span class="collection__filter-chevron">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <polyline points="6 9 12 15 18 9"></polyline>
                    </svg>
                  </span>
                </summary>
                
                <div class="collection__filter-content">
                  <ul class="collection__filter-list">
                    {% case filter.type %}
                      {% when 'boolean' or 'list' %}
                        {% for filter_value in filter.values %}
                          <li class="collection__filter-item">
                            <label class="collection__filter-label" for="Filter-{{ filter.label | handleize }}-{{ forloop.index }}">
                              <input 
                                type="checkbox" 
                                name="{{ filter_value.param_name }}" 
                                value="{{ filter_value.value }}" 
                                id="Filter-{{ filter.label | handleize }}-{{ forloop.index }}"
                                class="collection__filter-checkbox"
                                {% if filter_value.active %}checked{% endif %}
                              >
                              <span class="collection__filter-text">{{ filter_value.label }}</span>
                              <span class="collection__filter-count">{{ filter_value.count }}</span>
                            </label>
                          </li>
                        {% endfor %}
                      {% when 'price_range' %}
                        <li class="collection__filter-item collection__filter-item--price">
                          <div class="collection__price-range">
                            <div class="collection__price-range-inputs">
                              <label class="collection__price-range-label" for="Filter-{{ filter.min_value.param_name }}">
                                <span class="visually-hidden">{{ 'collections.filters.from' | t }}</span>
                                <span>{{ 'collections.filters.min_price' | t }}</span>
                                <input 
                                  class="collection__price-range-input" 
                                  type="number" 
                                  name="{{ filter.min_value.param_name }}" 
                                  id="Filter-{{ filter.min_value.param_name }}" 
                                  placeholder="{{ filter.range_min | money_without_trailing_zeros }}" 
                                  min="0" 
                                  inputmode="numeric"
                                  {% if filter.min_value.value %}value="{{ filter.min_value.value | money_without_currency | replace: ',', '' }}"{% endif %}
                                >
                              </label>
                              <label class="collection__price-range-label" for="Filter-{{ filter.max_value.param_name }}">
                                <span class="visually-hidden">{{ 'collections.filters.to' | t }}</span>
                                <span>{{ 'collections.filters.max_price' | t }}</span>
                                <input 
                                  class="collection__price-range-input" 
                                  type="number" 
                                  name="{{ filter.max_value.param_name }}" 
                                  id="Filter-{{ filter.max_value.param_name }}" 
                                  placeholder="{{ filter.range_max | money_without_trailing_zeros }}" 
                                  min="0" 
                                  inputmode="numeric"
                                  {% if filter.max_value.value %}value="{{ filter.max_value.value | money_without_currency | replace: ',', '' }}"{% endif %}
                                >
                              </label>
                            </div>
                          </div>
                        </li>
                    {% endcase %}
                  </ul>
                </div>
              </details>
            </div>
          {% endfor %}
          
          {% if collection.current_vendor or collection.current_type %}
            <div class="collection__active-filters">
              <div class="collection__active-filters-reset-wrapper">
                <a href="{{ collection.url }}?sort_by={{ collection.sort_by }}" class="collection__active-filters-reset">{{ 'collections.filters.clear_all' | t }}</a>
              </div>
            </div>
          {% endif %}
        </div>
      </div>
      
      <div class="collection__products">
        {% if collection.products.size > 0 %}
          <div class="collection__grid" data-view="grid">
            {% paginate collection.products by 24 %}
              {% for product in collection.products %}
                <div class="collection__product-card">
                  <div class="product-card">
                    <a href="{{ product.url }}" class="product-card__link">
                      <div class="product-card__media">
                        {% if product.featured_image != blank %}
                          <img
                            srcset="{{ product.featured_image | image_url: width: 300 }} 300w,
                                    {{ product.featured_image | image_url: width: 400 }} 400w,
                                    {{ product.featured_image | image_url: width: 500 }} 500w"
                            src="{{ product.featured_image | image_url: width: 400 }}"
                            sizes="(min-width: 1200px) 300px, (min-width: 990px) 220px, (min-width: 750px) 30vw, calc(100vw - 30px)"
                            loading="lazy"
                            width="{{ product.featured_image.width }}"
                            height="{{ product.featured_image.height }}"
                            alt="{{ product.featured_image.alt | default: product.title | escape }}"
                            class="product-card__image"
                          >
                        {% else %}
                          {{ 'product-1' | placeholder_svg_tag: 'product-card__image placeholder-svg' }}
                        {% endif %}
                        
                        {% if product.compare_at_price > product.price %}
                          <span class="product-card__badge product-card__badge--sale">
                            {{ 'products.product.on_sale' | t }}
                          </span>
                        {% endif %}
                        
                        {% if product.available == false %}
                          <span class="product-card__badge product-card__badge--sold-out">
                            {{ 'products.product.sold_out' | t }}
                          </span>
                        {% endif %}
                      </div>
                      
                      <div class="product-card__info">
                        {% if product.vendor != blank %}
                          <span class="product-card__vendor">{{ product.vendor }}</span>
                        {% endif %}
                        
                        <h3 class="product-card__title">{{ product.title }}</h3>
                        
                        <div class="product-card__price">
                          {% if product.compare_at_price > product.price %}
                            <span class="product-card__price--regular">{{ product.compare_at_price | money }}</span>
                            <span class="product-card__price--sale">{{ product.price | money }}</span>
                          {% else %}
                            <span class="product-card__price--regular">{{ product.price | money }}</span>
                          {% endif %}
                        </div>
                        
                        {% if product.metafields.reviews.rating %}
                          <div class="product-card__rating">
                            <span class="product-card__rating-stars" style="--rating: {{ product.metafields.reviews.rating.value | divided_by: 5.0 | times: 100 }}%;">★★★★★</span>
                            <span class="product-card__rating-count">({{ product.metafields.reviews.rating_count }})</span>
                          </div>
                        {% endif %}
                        
                        {% if product.type == 'Gaming PC' and product.metafields.specs.pc_category %}
                          <div class="product-card__pc-category product-card__pc-category--{{ product.metafields.specs.pc_category | handleize }}">
                            {{ product.metafields.specs.pc_category }}
                          </div>
                        {% endif %}
                        
                        {% if collection.handle == 'cpu' or collection.handle == 'processors' %}
                          {% if product.metafields.specs.cores and product.metafields.specs.base_clock %}
                            <div class="product-card__specs">
                              <span class="product-card__spec">{{ product.metafields.specs.cores }} Cores</span>
                              <span class="product-card__spec">{{ product.metafields.specs.base_clock }}</span>
                            </div>
                          {% endif %}
                        {% elsif collection.handle == 'gpu' or collection.handle == 'graphics-cards' %}
                          {% if product.metafields.specs.memory and product.metafields.specs.gpu_model %}
                            <div class="product-card__specs">
                              <span class="product-card__spec">{{ product.metafields.specs.memory }}</span>
                              <span class="product-card__spec">{{ product.metafields.specs.gpu_model }}</span>
                            </div>
                          {% endif %}
                        {% endif %}
                      </div>
                    </a>
                    
                    {% if product.available %}
                      <div class="product-card__actions">
                        {% form 'product', product, class: 'product-form' %}
                          <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
                          
                          <button
                            type="submit"
                            name="add"
                            class="product-card__add-to-cart button button--primary button--small"
                          >
                            {{ 'products.product.add_to_cart' | t }}
                          </button>
                        {% endform %}
                      </div>
                    {% endif %}
                  </div>
                </div>
              {% endfor %}
              
              {% if paginate.pages > 1 %}
                <div class="collection__pagination">
                  <nav class="pagination" role="navigation" aria-label="{{ 'general.pagination.label' | t }}">
                    <ul class="pagination__list">
                      {% if paginate.previous %}
                        <li class="pagination__item pagination__item--prev">
                          <a href="{{ paginate.previous.url }}" class="pagination__link" aria-label="{{ 'general.pagination.previous' | t }}">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                              <polyline points="15 18 9 12 15 6"></polyline>
                            </svg>
                            <span>{{ 'general.pagination.previous' | t }}</span>
                          </a>
                        </li>
                      {% endif %}
                      
                      {% for part in paginate.parts %}
                        {% if part.is_link %}
                          <li class="pagination__item">
                            <a href="{{ part.url }}" class="pagination__link">{{ part.title }}</a>
                          </li>
                        {% else %}
                          {% if part.title == paginate.current_page %}
                            <li class="pagination__item pagination__item--current">
                              <span class="pagination__link pagination__link--current" aria-current="page">{{ part.title }}</span>
                            </li>
                          {% else %}
                            <li class="pagination__item pagination__item--ellipsis">
                              <span class="pagination__ellipsis">{{ part.title }}</span>
                            </li>
                          {% endif %}
                        {% endif %}
                      {% endfor %}
                      
                      {% if paginate.next %}
                        <li class="pagination__item pagination__item--next">
                          <a href="{{ paginate.next.url }}" class="pagination__link" aria-label="{{ 'general.pagination.next' | t }}">
                            <span>{{ 'general.pagination.next' | t }}</span>
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                              <polyline points="9 18 15 12 9 6"></polyline>
                            </svg>
                          </a>
                        </li>
                      {% endif %}
                    </ul>
                  </nav>
                </div>
              {% endif %}
            {% endpaginate %}
          </div>
        {% else %}
          <div class="collection__empty">
            <p class="collection__empty-text">{{ 'collections.general.no_matches' | t }}</p>
            
            {% if collection.filters.size > 0 %}
              <div class="collection__empty-button-wrapper">
                <a href="{{ collection.url }}?sort_by={{ collection.sort_by }}" class="button button--primary">{{ 'collections.filters.clear_all' | t }}</a>
              </div>
            {% endif %}
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Sort By functionality
    const sortSelect = document.getElementById('SortBy');
    if (sortSelect) {
      sortSelect.addEventListener('change', function() {
        const url = new URL(window.location.href);
        url.searchParams.set('sort_by', this.value);
        window.location.href = url.toString();
      });
    }
    
    // Filter Toggle functionality
    const filterButton = document.querySelector('.collection__filter-button');
    const filterCloseButton = document.querySelector('.collection__filters-close');
    const filterContainer = document.getElementById('collectionFilters');
    
    if (filterButton && filterContainer) {
      filterButton.addEventListener('click', function() {
        const expanded = this.getAttribute('aria-expanded') === 'true';
        this.setAttribute('aria-expanded', !expanded);
        filterContainer.classList.toggle('collection__sidebar--open');
        document.body.classList.toggle('overflow-hidden');
      });
    }
    
    if (filterCloseButton && filterContainer) {
      filterCloseButton.addEventListener('click', function() {
        filterButton.setAttribute('aria-expanded', 'false');
        filterContainer.classList.remove('collection__sidebar--open');
        document.body.classList.remove('overflow-hidden');
      });
    }
    
    // View Mode Toggle (Grid/List)
    const viewButtons = document.querySelectorAll('.collection__view-button');
    const productGrid = document.querySelector('.collection__grid');
    
    if (viewButtons.length > 0 && productGrid) {
      viewButtons.forEach(button => {
        button.addEventListener('click', function() {
          const viewMode = this.getAttribute('data-view');
          
          // Update active button
          viewButtons.forEach(btn => {
            btn.classList.remove('collection__view-button--active');
          });
          this.classList.add('collection__view-button--active');
          
          // Update view mode
          productGrid.setAttribute('data-view', viewMode);
          
          // Store preference in local storage
          localStorage.setItem('collection_view_preference', viewMode);
        });
      });
      
      // Load view preference from local storage
      const savedViewPreference = localStorage.getItem('collection_view_preference');
      if (savedViewPreference) {
        const viewButton = document.querySelector(`.collection__view-button--${savedViewPreference}`);
        if (viewButton) {
          viewButton.click();
        }
      }
    }
    
    // Filter Form Submission
    const filterCheckboxes = document.querySelectorAll('.collection__filter-checkbox');
    const priceRangeInputs = document.querySelectorAll('.collection__price-range-input');
    
    const formSubmissionHandler = function() {
      const form = document.createElement('form');
      form.method = 'get';
      
      // Add sort_by parameter if exists
      const currentUrl = new URL(window.location.href);
      const sortBy = currentUrl.searchParams.get('sort_by');
      if (sortBy) {
        const sortByInput = document.createElement('input');
        sortByInput.type = 'hidden';
        sortByInput.name = 'sort_by';
        sortByInput.value = sortBy;
        form.appendChild(sortByInput);
      }
      
      // Add checked checkboxes
      filterCheckboxes.forEach(checkbox => {
        if (checkbox.checked) {
          const input = document.createElement('input');
          input.type = 'hidden';
          input.name = checkbox.name;
          input.value = checkbox.value;
          form.appendChild(input);
        }
      });
      
      // Add price range inputs if they have values
      priceRangeInputs.forEach(input => {
        if (input.value) {
          const hiddenInput = document.createElement('input');
          hiddenInput.type = 'hidden';
          hiddenInput.name = input.name;
          hiddenInput.value = input.value;
          form.appendChild(hiddenInput);
        }
      });
      
      document.body.appendChild(form);
      form.submit();
    };
    
    filterCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', formSubmissionHandler);
    });
    
    priceRangeInputs.forEach(input => {
      input.addEventListener('change', function() {
        // Delay to allow user to finish typing
        clearTimeout(this.timeout);
        this.timeout = setTimeout(formSubmissionHandler, 500);
      });
    });
  });
</script>